// https://www.youtube.com/watch?v=8aGhZQkoFbQ&t=868s
// Синхронные действия процесса – те, 
//  которые выполняются в основном потоке, 
//  в рамках одного экземпляра процесса. 
//  Ключевое отличие синхронного режима: следующее действие начинается только тогда, 
//  когда завершено предыдущее. Соответственно, 
//  пока одно действие не завершено, 
//  процесс стоит колом.

// Асинхронные действия – те, 
//  которые выполняются параллельно основному потоку, 
//  либо в том же экземпляре процесса, 
//  либо вообще в другом процессе. 
//  Ключевое отличие асинхронного режима: параллельное выполнение двух и более ветвей процесса.
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!!! Promise - микрозадача               !!
// setTimeout - макрозадача                 !!
// Микрозадачи выполняется ранше макрозадач !!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

// let someAsincValue= new Promise((resolve,reject)=>{
//     let isFinished = true
//     if(isFinite){
//         resolve(1)
//     }
//     else{
//         reject("Потому что isFinite не положительный значение")
//     }
// })

// someAsincValue.then(()=>{  // then игнорируется при не успешном запросе 
//     console.log("Выпольнился успешно")
// }).catch(()=>{  // catch игнорируется при успешном запросе 
//     console.log("Выпольнился не успешно");
// })
// // //=======================================================================

// fetch("")
//     .then(res=>res.json())/* // Переоразование ответа в json*/
//     .then((data)=>{ // Получение ответа от преведущего then и обработка data
//         console.log(data)
//     }).catch((err)=>{ // Если ошибка
//         console.log(err)     
//     })











/////////////////////////////////////
/////коды с урока
// setTimeout(() => {     
//   // ждет ответа от какого то кода, занимает некоторое время
//   console.log('Выполнился таймаут')
// }, 0) // Выполняется последним после синхронных задач

// [].reduce((sum, item) => {

// }, 0)

// console.log({}/13) // NaN

// const user = new User() // экхх

// Javascript - однопоточный синхронный язык

// let user =  {}

// Синхронность, выполняется сразу при получении кода
// function someFunc() { 
//   // Не ждет
//   console.log(1)
// }

// let number = 1000

// someFunc()

//Асинхронность 
// setTimeout(() => {     
//   // ждет ответа от какого то кода, занимает некоторое время
//   console.log(1)
// }, 0)


// console.log('Какое то действие')


// for (let i = 0; i < 10; i++) {
//   console.log(i)
// }


// Event Loop


// 12312313 => someCalculation(12312313)

// Promise - асинхронный код, имеет 3 состояния - 
// pending = ожидание
// fullfilled = выполнился успешно
// rejected = безуспешно

// let someAsyncValue = new Promise((resolve, reject) => {
//   let isFinished = false
//   if(isFinished) {
//     resolve(1)
//   } else {
//     reject('Потому что isFinished не положительное значение')
//   }
// })

// someAsyncValue.then((data) => { // then игнорируется при не успещном запросе
//   console.log('Выполнился успешно', data)
// }).catch((err) => { // catch игнорируется при успещном запросе
//   console.log('Выполнился не успешно', err)
// })

let userData

{/* <data>
  <fact>liunrvnarln nekrnvlaierunvli unraiwufnalirunflireun</fact>
  <length>97</length>
</data> */}

// Promise - микрозадача
// setTimeout - макрозадача
// Микрозадачи выполняются раньше макрозадач

fetch('https://jsonplaceholder.typicode.com/posts/' + id)
  .then(res => res.json()) // Преобразование ответа в json
  .then((data) => {  // Получение ответа от предыдущего then и обработка data
    console.log(data)
  })
  .catch((err) => { // Если ошибка
    console.log(err)
  })